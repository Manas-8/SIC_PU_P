# Biggest digit in a number
number=input("Enter the number: ")
current_max=int(number[0])
for i in number:
    if int(i)>current_max:
        current_max=int(i)

print(f"the biggest digit is {current_max}")



# Find 2nd smallest digit in a number
number = input("Enter the number: ")
smallest = 10
second_smallest = 10

for i in number:
    digit = int(i)
    if digit < smallest:
        second_smallest = smallest
        smallest = digit
    elif smallest < digit < second_smallest:
        second_smallest = digit

if second_smallest == 10:
    print("No second smallest digit exists.")
else:
    print("Second smallest digit:", second_smallest)


# Print the Prime numbers in decreasing order between m and n (m < n)
lower_number=int(input("Enter lower number: "))
higher_number=int(input("Enter higher number: "))
prime_numbers=[]
for i in range(lower_number, higher_number+1):
    for j in range(2, i):
        if(i % j == 0):
            break
    else:
        prime_numbers.append(i)
        
prime_numbers.reverse()
print(prime_numbers)



# Count the number of prime numbers
number=input("Enter the number: ")
count=0
for i in number:
    if int(i) in [2, 3, 5, 7]:
        count+=1
    
print(count)


# Fibonacci
number=int(input("Enter the number: "))
list1=[1, 2]
for i in range(2, number):
    fibonacci=list1[i-1]+list1[i-2]
    list1.append(fibonacci)
    
print(list1)

# series
power=1
denominator=1
n=int(input("Enter the number for 1 to 4: "))
m=int(input("Enter the number for 2 to 10: "))
sign=1
sum=0
for i in range(m):
    terms=sign*(n**power)/denominator
    denominator=denominator+2
    sign=sign*-1
    power=power*2
    sum=sum+terms
    
print(sum)


def right_angled_triangle(n):
    print("Right Angled Triangle")
    for i in range(1, n+1):
        print('*' * i)
    print()

def equilateral_triangle(n):
    print("Equilateral Triangle")
    for i in range(n):
        print(' ' * (n - i - 1) + '*' * (2 * i + 1))
    print()

def hollow_square(n):
    print("Hollow Square")
    for i in range(n):
        if i == 0 or i == n-1:
            print('*' * n)
        else:
            print('*' + ' ' * (n-2) + '*')
    print()

def hollow_rhombus(n):
    print("Hollow Rhombus")
    for i in range(n):
        print(' ' * (n - i - 1), end='')
        if i == 0 or i == n-1:
            print('*' * n)
        else:
            print('*' + ' ' * (n - 2) + '*')
    print()

def x_shape(n):
    print("X Shape")
    for i in range(n):
        for j in range(n):
            if j == i or j == n - i - 1:
                print('*', end='')
            else:
                print(' ', end='')
        print()
    print()

def x_in_hollow_square(n):
    print("X Shape Inside Hollow Square")
    for i in range(n):
        for j in range(n):
            if i == 0 or i == n-1 or j == 0 or j == n-1 or i == j or j == n - i - 1:
                print('*', end='')
            else:
                print(' ', end='')
        print()
    print()

# Set the size
size = 7

# Call all pattern functions
right_angled_triangle(size)
equilateral_triangle(size)
hollow_square(size)
hollow_rhombus(size)
x_shape(size)
x_in_hollow_square(size)


# Find sum of the Even placed digits in the given number.
number=input("Enter the number: ")
count = 0
sum = 0
for i in number:
    count += 1
    if count % 2 == 1:
        continue
    else:
        sum = sum + int(i)

print(f"the sum of even placed digits is {sum}")

# Find sum of the Odd placed digits in the given number.
number=input("Enter the number: ")
count = 1
sum = 0
for i in number:
    count += 1
    if count % 2 == 1:
        continue
    else:
        sum = sum + int(i)

print(f"the sum of even placed digits is {sum}")


